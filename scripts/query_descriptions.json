{
    "69": "This API Endpoint is designed to retrieve and present account balances records from a specified blockchain network. It selects and organizes the information about the account's token_address, chain_id, timestamp of last update, balance, token_standard, and token_id.\n\nThe required parameters for this query are: \n'chain_id' (text) which indicates the ID of the blockchain chain,\n'network' (text) refers to the specific public blockchain network,\n'account_address' (text) signifies the address of the account from which balances are being fetched,\nand 'token_address' (text) that gives the address of the tokens in the account.\n\nThe output of the query will include the following fields: \nThe token address from which the balance is retrieved,\nthe corresponding blockchain chain ID,\nthe timestamp of the last balance update,\nthe final balance value,\nthe token standard being used,\nand the token ID associated with these details.\n\nThe results are presented in a tabular format for easy organization and readability.",
    "8": "The 'Daily Gas Used' query is designed to retrieve the daily aggregate of gas used for transactions within specified date ranges on a given network. The query requires two parameters: 'dates', which is a date-range and 'network', which is a query type. It generates an output consisting of formatted dates ('date') and the related sum of 'gas_used' on each of these dates ('daily_gas_used'). In addition to representing the output data in a table format, a chart visualization ('Daily Gas Used::CHART') is also generated to visually describe the daily usage of gas. This data is crucial for gauging network activity and transaction cost trends.",
    "32": "This API Endpoint, ERC20 Daily Token Transfer by Token, serves to retrieve the daily count of ERC20 token transfers for a specified token within a specific date range from a specified blockchain network. The parameters it accepts are:\n\n1. 'dates': a date-range specifying the start and end dates for which the data is required.\n2. 'token_address_requested': a text input which is the address of the ERC20 token in question.\n3. 'network': a query input that specifies the blockchain network from which the data should be sourced.\n\nThe output produced by the API is a dataset where each record contains the following information:\n\n1. 'date': the date for which the data was collected.\n2. 'erc20_txs': the count of transactions involving the specified ERC20 token for the given date.\n\nA Chart::CHART visualization of this data can be produced to provide a graphical representation of the ERC20 token's daily transaction counts over the specified date range.",
    "18": "This API endpoint, designated as 'New Query', is designed to fetch blockchain block data from the 'dex_etl.7700_blocks' table within our database. This public API, on invoking, pulls the latest 10 blocks that have been logged in our records, providing an up-to-date snapshot of our most recently processed block data. As this is a select all query with no parameters, there is no expectation to pass any. \n\nThe output generated by this endpoint corresponds to all the fields in the 'dex_etl.7700_blocks' table, which may typically include fields like block height, block hash, timestamp, transactions, and other related blockchain parameters for the most recent 10 blocks. The output format is a table with each row representing a single block record.\n\nPlease note that although the table visualization is available, it won't be described as per the request in the given metadata.",
    "81": "This API Endpoint, Historical Gas Fee By Day, retrieves historical daily average maximum gas fees for a given network. The endpoint accepts two parameters: 'dates' and 'network'. The 'dates' parameter is a date-range that specifies the start and end dates for data retrieval, in ISO-8601 format. The 'network' parameter is a query type, indicating the desired blockchain network for which the information is needed. The output of this query includes the dates and corresponding average maximum gas fees (in ethereum, ETH) for each day within the specified range. The output data is visualized through a chart that plots the historical average gas fees against corresponding dates, representation helps in a comparative analysis over the time frame for gas consumption on the chosen network.",
    "64": "This API endpoint provides a query for Block Explorer Pages that fetches account balance records for a specific token address. \n\nIt expects three parameters: 'chain_id', which is a text input identifying the blockchain network; 'network', another text input indicating the specific network to query balances from; and 'account_address', a text input which denotes the unique address of the account on the network.\n\nThe output of this query includes fields of 'token_address', 'chain_id', 'timestamp', 'balance', 'token_standard', and 'token_id'. 'Token_address' is the address of a specific token; 'chain_id' refers to the blockchain network id; 'timestamp' records the exact time when the last token balance change occurred; 'balance' is the latest token balance; 'token_standard' shows the particular token standard like ERC20, ERC721 etc.; and 'token_id' is the unique identifier for each kind of token.\n\nThe generated visual representation is a simple table format.",
    "82": "This API Endpoint, referred to as \"Most Gas Spenders,\" retrieves the top 50 addresses in terms of total gas used from a specified network within a set date range. Two parameters are required for this endpoint. The first parameter, \"dates,\" should be a date-range indicating the exact timespan for fetching the data. The second parameter, \"network,\" is a query param for specifying the network from which the transactions are fetched. The endpoint utilizes these parameters to perform SQL queries on the transactions database, generating a resulting dataset displaying the 'from_address' and its corresponding amount of 'total_gas_used.' The result is sorted in descending order by 'total_gas_used.' Visualizations rendered from this API Endpoint include a Chart titled \"Most Gas Spenders Distribution,\" displaying how gas expenditure is distributed among the top addresses. The Table output is ignored in the documentation as per the rules.",
    "11": "This API endpoint, 'Active Addresses', is designed to fetch the total count of unique transaction addresses within a given network. The necessary parameter for this endpoint is 'network', which must be included in the query as a string. This indicates the specific network from which the data is to be pulled. The SQL query operates by counting the distinct 'from_address' within the network's transactions. The primary output is a numerical count tagged as 'active_addresses', corresponding to the amount of unique active addresses on the requested network. For visual representation, this endpoint also provides an 'Active Addresses' counter visualization. The table visualization is not included in the description as per the request. This endpoint can be used in block explorer pages to provide clear insight into the diversity of transaction addresses within a network.",
    "12": "This Smart Contracts API Endpoint has been designed to present a total count of unique contract addresses from the selected network's logs. The query involved requires one parameter, 'network', from your request. This parameter acts as a query string and is used to identify which network's logs will be used in the query. The output produced by this API endpoint is a single value denoting the total number of unique contract addresses in the queried network. Furthermore, the query is visualised using the 'Smart Contracts::COUNTER' feature to provide a more intuitive and straightforward representation of the data. Please note, however, the 'Table::TABLE' visualization does not have an accompanying description.",
    "39": "This API endpoint executes the \"Network Average Gas Utilization\" query which is useful in analyzing overall efficiency of gas usage in transactions within a specific blockchain network. It takes two parameters: 'dates' (type: date-range), specifying the start and end dates to retrieve data from, and 'chain_id' (type: query), indicating the blockchain network to analyse. The endpoint performs a selection from 'dex_etl' where each block's timestamp falls within the given date-range. It computes the average gas utilization percentage by dividing the gas used by the gas limit and multiplying by the transaction count, and then grouping these by date. The data is returned in ascending date-order.",
    "70": "This API Endpoint, termed as Warehouse Contracts Page Query, is designed to fetch and display specific transaction details from a network. The details to be fetched include the from_address, the transaction hash and the to_address. \n\nThe API accepts three parameters:\n1. Skip: A number that determines the number of transactions to skip before beginning to fetch the data.\n2. Network: A query string that identifies the specific network from where the transactions will be fetched.\n3. First: A number which determines the total number of transaction records to fetch from the network after skipping the specified transactions.\n4. Transaction_hash: A text/string parameter that specifies the unique hash ID of the transaction that needs to be fetched.\n\nUpon execution, the API outputs a dataset containing the aforementioned transaction details (from_address, hash, and to_address). This output is presented in a table format for easy interpretation and understanding. Please note that no visualization tools have been integrated into this API.",
    "13": "This API endpoint is designed to fetch the count of transactions, active addresses, and active smart contracts between selected dates in a specific blockchain network. It requires two parameters: chain_id, specified in the query, which identifies the blockchain network to extract the data from, and dates, a date-range type parameter which sets the start and end time for data extraction.\n\nThe endpoint then runs an SQL query on the selected blockchain's transaction records, grouping and counting the relevant data fields. The output forms the dataset with columns 'date', 'transactions', 'active_addresses', and 'active_smart_contracts', being the date of extraction, count of transactions, active addresses, and active smart contracts respectively.\n\nThis data is ideally visualized as a chart, with the dates on the X-axis and transactions, active addresses, and active smart contracts on the Y-axis. A table visualization is also available.",
    "14": "This query, labeled as 'Total Transactions Hashes', aims to retrieve the total count of transaction hashes from a specific network. The query requires a parameter: 'network' which should be input as a string value that specifies the name of the network from where the data is being fetched. Each transaction hash corresponds to a unique transaction executed within the network. The output will be the total count of transaction hashes on the given network which gives an overview of the activities within the network. Besides the standard table format, the results can also be visualized as a 'Transactions Hashes Count' counter visualization.",
    "19": "This API endpoint executes a database query to provide statistical data from certain dates for a particular blockchain network or 'chain_id'. It takes two parameters:\n\n1. 'chain_id' (query) - It refers to the specific blockchain network to fetch data from.\n2. 'dates' (date-range) - This denotes the range of dates for which the data is needed.\n\nThe query returns a summary of blockchain activities which includes date, total number of transactions, total unique addresses participated, and total unique smart contracts involved within the indicated date-range. \n\nThe returned data are ideally used to create a chart visualization which presents a summary of transactions, active addresses, and active smart contracts over time, to monitor the blockchain network's activity. Given data can be sorted based on dates for easy charting and interpretation.",
    "71": "The `Blocks Warehouse Page Query` API endpoint retrieves block-specific data from a specified network. The designated network is dynamically specified using the `network` query parameter. Additionally, the maximum number of results to return is controlled using the `first` parameter (numeric type), while the `skip` parameter (numeric type) is utilized to control the starting point of the data retrieval, effectively supporting pagination. The resultant output includes block 'number', 'timestamp', 'gas_limit', 'gas_used', 'size', 'base_fee_per_gas', 'extra_data', 'hash', 'parent_hash', 'state_root', and 'nonce'. These records are presented in a tabular format with the help of the Table::TABLE visualization. Ensuring this endpoint is especially beneficial for advanced data analysis and visualization in Block Explorer pages.",
    "72": "This API endpoint, titled \"Address Warehouse Page Query\", is primarily designed for querying transaction information relative to a specific blockchain address on a given network. The query expects four parameters: 'skip' (number), which specifies an offset for the query results returned; 'network' (query), representing the blockchain network to acquire the data from; 'first' (number), the limit of the number of results returned; and 'address' (text), a blockchain address used for filtering the transactions.\n\nThe output of the query includes the fields: 'from_address' indicating the senders of the transactions; 'value' denoting the transaction amount; 'hash' being the unique transaction identifier; 'block_number' displaying the block in which the transaction was added; 'block_timestamp' showing when the block was created; and 'to_address', which is the recipient of the transaction. These outputs are displayed in a simple table format.",
    "65": "This API Endpoint, \"#58 Account Balances Records Copy\", is used to retrieve records of account balances per token from the specified blockchain network. \n\nIt accepts three parameters:\n1. `chain_id` (text): The unique identifier of the blockchain chain.\n2. `network` (text): The specific blockchain network to query from.\n3. `account_address` (text): The unique address of the account. \n\nThe executed SQL query will select and return the following fields: `token_address`, `chain_id`, `timestamp` (the timestamp of the block), `balance` (the token balance at the specified timestamp), `token_standard`, and `token_id`. The query only returns records with a balance value greater than 0. \n\nThe data generated by this endpoint is best visualized as a table, clearly showing the different token balances in the selected account.",
    "35": "This API endpoint provides a way to fetch native tokens of different chains present in a decentralized exchange (dex). The query selects `chain_id` and assigns it an encoded address known as `name`. When chain ID equals 10, 250, 7700, 100, 42161, and 42170, distinctive `name` values are returned. Else, NULL is returned. \n\nThis query doesn't require any parameters. \n\nThe output of this endpoint is a table with two columns - `value` and `name`. The `value` column corresponds to the chain_id extracted from the dex_etl.chains table, and the `name` column has the corresponding native token address.\n\nThis endpoint does not directly support any data visualization. However, the returned data table can be used to create tables or charts to visualize the chain IDs and their corresponding token addresses.",
    "9": "This API endpoint, 'Blocks', is designed to retrieve the most recent block data from a specific network. It accepts one query parameter 'network', which should be a string representation of the name of the network for which the block data is to be retrieved. The endpoint executes a SQL query that selects all columns from the 'blocks' table of the specified network, orders the result in descending order by block number, and limits the result to the 10 most recent blocks. The output produced will be a JSON object containing all fields of the 'blocks' table for the 10 blocks selected. No specific visualizations are generated with this endpoint. This data can be useful for various purposes including monitoring network activity or verifying transactions.",
    "74": "This API endpoint, Address Warehouse Page ERC-20 TXs, fetches a specific number of ERC-20 token transactions for a given address from a particular blockchain network. The parameters it expects are: \n\n1. 'network', a query parameter that specifies the blockchain network.\n2. 'first', an enum parameter that determines the number of records to return.\n3. 'skip', a text parameter that sets the number of records to skip.\n4. 'address', a text parameter that specifies the address to pull transactions from.\n\nThe SQL statement the endpoint uses returns the hash of the transaction, the timestamp of the block, the sender's address, the receiver's address, the value transferred, and the address of the token. These outputs are produced in a tabular format. No visualization is created for this API endpoint.",
    "66": "This API Endpoint, \"Copy of (#58) Account Balances Records\", retrieves the most recent record of all token balances greater than zero for a specific account on a specified blockchain network. \n\nIt expects three parameters: 'chain_id' (text type, representing the blockchain network ID), 'network' (text type, indicating the name of the blockchain network), and 'account_address' (text type, indicating the account's address on the blockchain).\n\nExecuting the query will produce a list of records including the token address, chain ID, timestamp of the latest transaction, current balance, token standard, and token ID. Please note that the list will only include tokens where the current balance is above zero.\n\nThe results of this query are displayed in a table format.",
    "16": "This API Endpoint, Last Block Ago, retrieves the most recent block details from a specific blockchain. \n\nThe endpoint expects one parameter: 'chain_id'. This query parameter represents the ID of a blockchain and it should be included in your request as a string. \n\nThe SQL query executes to the blockchain you specify via the 'chain_id' and returns the most recent block's timestamp, the block number, and the seconds that have elapsed since the block was created. The time is calculated by subtracting the timestamp of the block from the current time.\n\nThe output of this API Endpoint is a table that provides the number and timestamp of the recently created block, along with the number of seconds passed since the block creation. The table follows the standard SQL table structure and visualization.",
    "20": "This API endpoint serves the Block Explorer pages by executing a query coined 'Unique Addresses'. Its main purpose is to fetch a list of unique 'from' addresses that interacted with a predetermined blockchain network in a given time range. The parameters required for this API endpoint are 'dates' and 'network'. 'Dates' is a date-range type parameter indicating the start and end date of the period to be queried in 'yyyy-mm-dd' format. 'Network' is a query type parameter and refers to the specific blockchain network to be investigated. The output of this endpoint is a table sorted in ascending order by date, where each row provides the unique 'from' addresses that transacted on the specified network for each given day. Additionally, a 'Unique Addresses Chart' visualization is created to provide a graphical representation of the number of these unique addresses over time.",
    "96": "This API endpoint allows for querying the number of daily transfers for a given token on a specific network over a 7-day period. The required parameters include 'token_address_requested' which is a text field specifying the address of the token and 'network', which indicates the blockchain network. The API returns a dataset including the transaction date ('transaction_date') and the count of transfers ('transfer_count') for each day. The output is ordered chronologically. A chart visualization is provided, plotting the 'transaction_date' on the x-axis and 'transfer_count' on the y-axis, which effectively shows transfer trends over the 7 day period.",
    "89": "This API endpoint is designed to serve the Block Explorer pages by executing the SQL statement \"show create base.blocks\". The key purpose of this endpoint is to display the structure of the `base.blocks` table including column names, datatype of each column, and other attributes. \n\nRegarding parameters, this query doesn't require any parameters to be inputted by the users. So, it's easy for any consumers to use this API without worrying about complex parameters configuration.\n\nThe output produced by this query will be a raw table schematic including information such as fields name, type, default values, keys and any additional information related to the table structure. \n\nPlease note that the visualization for this endpoint is a table, but it's not included in the provided output as per the metadata instructions. To view the data, users should parse the response and display it according to their specific requirements.",
    "22": "This API endpoint provides the number of transactions per day within a date range for a specified network on the blockchain. It expects two parameters: 'dates' and 'network'. The 'dates' parameter is a date-range, it expects a start and end date for querying transactions. The 'network' parameter is a query parameter and it expects the network identifier for specifying the network in which the data is to be fetched from the blockchain. The output of this API endpoint is a daily count of transactions, grouped and ordered by date. It generates a chart visualization named \"Daily Transactions Chart\" which gives the users a graphical representation of the daily transactions over the specified date range in the provided blockchain network.",
    "23": "This Public API endpoint, named \"Average Transaction Size\", allows users to query the average size of transactions within a specified date range on a selected network. The endpoint accepts two parameters: 'dates' and 'network'. The 'dates' parameter is a date range with a start and end date to define the time period for the query, while the 'network' parameter is a query string specifying the network of interest. \n\nThe SQL query utilized by this API generates results by selecting the date from a UNIX timestamp and computing the average transaction size within the specified time period for the given network. The output is a set of data grouped by date in ascending order, presenting the average size of transactions ('tx_size') for each date in the selected range.\n\nBased on this data output, a chart visualization can be created to display trends and patterns in the average transaction size over time.",
    "36": "This API endpoint allows querying of token balance for a specific address within a given date range and chain ID. It expects three parameters: 'chain_id', a query parameter determining the blockchain network, 'dates', a date-range parameter for defining the period of retrieval, and 'address', a text parameter for specifying the address of interest.\n\nThe query transforms chain IDs into their corresponding native token addresses before proceeding. It returns a dataset containing the date of the transaction and the number of transactions made per day ('txs_per_day') for the address within the specified date range on the identified chain.\n\nIn addition to tabular data, this API endpoint provides a visualization in the form of a Daily Transactions Chart by address, which offers a graphical representation of transactions per day over the chosen range.",
    "76": "This API endpoint is designed to retrieve a selection of token transfers from a specified network. The purpose of the query is to pull transaction information like hash, block timestamp, from/to addresses, value, and token address from the given network's token transfers.\n\nExpected parameters include:\n1. 'network' (query type) - Indicates the blockchain network from which the token transfers will be retrieved.\n2. 'first' (enum type) - Specifies the maximum number of records or rows to be returned in a single select query.\n3. 'skip' (text type) - Indicates how many records from the beginning will be bypassed before starting to fetch the records.\n\nIt produces outputs confirmed by the SQL structure: transaction hash, block timestamp, from address, to address, value, and the token address. Results are informative and improve transparency about token transfers. \n\nThe data result from the API can be visualized in a table format for a well-structured and human-readable layout.",
    "90": "This public API endpoint is designed to serve queries for block information from our Block Explorer. The endpoint executes the SQL query \"create show base.blocks\", which is designed to generate a view of the base Blockchain data.\n\nNo parameters are required for this query, which simplifies interaction and ensures compatibility with various systems or platforms. Despite its simple operation, it provides valuable insights into the blocks data that it retrieves from the database.\n\nThe output produced is in a table format that includes several essential details about the blocks such as block number, timestamp, miner, and transaction count, among others. This information is crucial for users interested in exploring and studying the Blockchain.\n\nDespite not having graphical visualizations, the table view generated offers an efficient way of providing a snapshot of base Blockchain activity. By providing these details in a tabular form, data can be easily parsed and analyzed by users.",
    "28": "This API Endpoint fetches the average gas price for transactions conducted within a specified date range on a given network. It requires two parameters. The \"dates\" parameter is a date-range type that dictates the start and end dates for the query. The second parameter, \"network,\" is a text type that specifies the network from which the data is fetched. The query returns the date along with the average gas price for each day in the specified range, in terms of Gwei (10^9 Wei). It uses Unix timestamps to ensure accurate date-time representation. The data is primarily visualized through a chart which aids in comprehending fluctuations in average gas prices over time.",
    "21": "The 'ERC20 Daily Token Transfer' API endpoint provides a count of ERC20 token transfer transactions on a specified network for a given date range. Users are requested to provide two parameters: 'dates', which is a range of dates to measure the transactions (format: 'YYYY-MM-DD' to 'YYYY-MM-DD'), and 'network', a text input inquiring the specific blockchain network to get the details from. The output of the endpoint is a table consisting of two columns: 'date' showing each day in the specified range and 'erc20_txs' showing the count of ERC20 token transfers occurred on that day. For a clear visual interpretation, data can be represented using a line chart which presents the count of ERC20 token transfers against each day in the provided date range. This can help users to easily track and analyze daily transfer activity.",
    "95": "This API endpoint, \"Number of Unique Address Transfers, 7d\", is used to fetch data pertaining to the transactions involving a specific token for the past week. Two parameters are required: 'token_address_requested' which should be a text string representing the specific token's address, and 'network' which should be a query string of the Blockchain network identifier.\n\nThis API generates outputs which include the transaction date, count of unique addresses from which the token was sent, and the count of unique addresses to which the token was received on the respective transaction date.\n\nA suitable visualization that is made available for this data is Chart::CHART, providing a graphical representation of the transaction date versus the count of unique sender and receiver addresses. Please note that no descriptions for TABLE visualizations are generated.",
    "77": "This API endpoint, #76 Transactions ERC-20 Warehouse Page, retrieves a list of ERC-20 token transfer transactions. It expects the parameters: 'network' (query type) indicating the specific network to access, 'first' (enum type) paraemeter defines the limit of transactions records to retrieve at one call, and 'skip' (text type) parameter defines the number of records to skip from the beginning. \n\nThe SQL query associated with this endpoint fetches the following data fields: 'transaction_hash', 'block_timestamp', 'from_address', 'to_address', 'value', and 'token_address'. \n\nThe output of the API call will be in the form of a table where each row corresponds to a single transaction, tabulating the values of each of the fields specified in the SQL query. For a comprehensive and effective data analysis, visualizing these outputs is recommended.",
    "85": "This API endpoint, \"Daily transactions by address, 7d\", retrieves daily transaction counts for a specific address over the past seven days using a SQL database query. It expects one parameter, 'address', which should be provided as text. This parameter represents the address for which the transaction data will be extracted. \n\nThe output produced includes two fields: 'transaction_date' and 'transaction_count'. The 'transaction_date' field corresponds to the date, and the 'transaction_count' marks the number of transactions made on that specific date. \n\nFor visualization, this API endpoint supports Chart type visualization. This is useful for displaying the transaction count trend for an address over a seven-day period, hence providing a comprehensive view of transaction activities.",
    "91": "This API endpoint provides data for the DAI Daily Unique Sender Addresses over the past 7 days. The query pulls information by the transaction_date and counts the number of unique sender addresses.\n\nThe endpoint accepts one parameter, 'token_address', which should be provided as a text string. The 'token_address' parameter specifies the crypto token's Ethereum address.\n\nThe output produced is a dataset containing a list of dates and their corresponding count of unique addresses that have sent the specified token on that day. Each data entry includes a 'transaction_date' and a 'unique_address_count' for the given token.\n\nAdditionally, the API endpoint supports visualizations and can be presented as a chart. A chart visualization would plot the 'transaction_date' on the x-axis, with a corresponding 'unique_address_count' as the y-value, effectively giving an overview of the transaction activity for the specific crypto token over the past week.",
    "24": "This API endpoint, named \"New Query\", aims to fetch all the transactions from the table 'dex_etl.7700_token_transfers' with a block_timestamp greater or equal to the timestamp provided in the 'dates' parameter. \n\nThe API expects the 'dates' parameter to be passed in the 'date' data type. This parameter is transformed to a UNIX timestamp before being used to filter the records in the 'dex_etl.7700_token_transfers' table.\n\nThe output of the API call will be all the records in the 'dex_etl.7700_token_transfers' table with a block_timestamp that is greater than or equal to the 'start_ts'. The result of this query is displayed in the form of a table but does not entail any specific visualization or representation. \n\nThis API is particularly useful when you want to extract all transactional data after a certain point in time.",
    "25": "This API endpoint, titled \"Average Block Size\", is designed to fetch the average size of blocks in a specific network over a defined date range. The parameters expected for this query include 'dates', a date-range specifying the start and end date for the period of interest, and 'network', a query parameter indicating which network's data to fetch. The output of this API endpoint is a structured data containing 'date' and 'average_block_size' for each day within the requested range, ordered ascendingly by the date. The data can be presented visually using a Chart visualization, which graphically represents the variation of average block size with each date, thus providing an intuitive and comprehensive overview of block size trends over time.",
    "26": "This API endpoint retrieves the average size of blocks for a specified blockchain and date range. It expects two parameters: 'chain_id' (query type) which specifies the id of the blockchain, and 'dates' (date-range type), which determines the start and end date for the average block size calculation. The output yields a string representation of each date within the range, along with the corresponding average block size for that date. This can be visualized using charts, offering a clear representation of the average block size over a specific period on a particular blockchain.",
    "27": "This API endpoint is designed to fetch average gas limit over a specified date range from the selected blockchain network. It accepts two parameters: 'dates' which is a date range value (start and end dates in the format of YYYY-MM-DD) defining the period of interest, and 'network' which is a string representing the name of the target blockchain network. \n\nThe output of this query includes the date of each record and the corresponding average gas limit for the particular date. Results are arranged in ascending order based on the date.\n\nThe resulting data can be visualized in a chart format, facilitating intuitive interpretation of the changes in the average gas use over time within the specified date range for the selected network. Note, the table visualization does not require any specific description.",
    "29": "This API endpoint, `Smart Contract Events Issued`, provides the number of events issued by a specific smart contract within a given date range in an organized, daily count. \n\nThe query requires three parameters:\n1. `address` (type: text): the particular smart contract address.\n2. `dates` (type: date-range): the start and end dates to define the search period.\n3. `network` (type: query): specifies the network data to be queried.\n\nThe output includes two values:\n1. `day` (type: date): a specific date within the inputted range.\n2. `events_count` (type: integer): the total number of events that happened on a given date.\n\nThis API also provides a chart visualization of the `events_count` over the date range. This visual representation lets users easily track the activity of a particular smart contract over time.",
    "30": "This API endpoint retrieves daily transaction data for a particular blockchain address within a specified date range. The query takes three parameters: \"dates,\" which is a range of dates (start date and end date) in Unix timestamp format, \"address,\" a string representing the blockchain address in question, and \"network,\" a query parameter specifying the blockchain network.\n\nThe result of the query displays each unique date within the specified range and the number of transactions that occurred on each of these dates for the provided address. This information has been represented as a chart labeled 'Daily Transactions Chart by address'. This visualization illustrates the daily transaction activity for the given address within the specified network and date range.\n\nPlease note that this information is also provided in a table format but no specific description or graphic visualisation is generated for this format.",
    "78": "This API endpoint facilitates the retrieval of transaction data for a specified transaction hash from the network of choice, serving as a key component in the Transaction Page Overview of the Block Explorer. \n\nThe endpoint expects two parameters: 'network' (query type), which signifies the specific blockchain network to be queried, and 'tx_hash' (text type), which refers to the unique transaction identifier.\n\nUpon execution, this query delivers output data, including the transaction hash, block number, block timestamp, both the sender ('from_address') and recipient ('to_address') of the transaction, the transferred value, gas used, gas price, as well as the input data encoded by the originator of the transaction. \n\nThe generated visualization for the results obtained is not explicitly described as it is represented in a standard tabular format.",
    "79": "This API endpoint, (#78) Transaction by Hash Page Main Data, retrieves specific transaction details based on their respective hash values from a specified network. \n\nThe expected parameters are 'network', 'first', and 'skip'. 'Network' is a query parameter representing the network from which the data is to be extracted. 'First' and 'skip' are text parameters used to limit and offset the data respectively, thus controlling the number of results returned from the query.\n\nThe output of this endpoint includes transaction details such as hash, block number, block timestamp, from_address, to_address, value, gas, gas_price, and input.\n\nThis data is then displayed in a table visualization, providing a clear and structured format for easy data analysis and comprehension.",
    "31": "This API endpoint, `Network Average Gas Utilization`, is formulated to determine the average gas utilization in a given network, measured between specified start and end dates. It accepts two types of parameters; `dates` which must be a range (start date to end date), and `network`, which is a query parameter denoting the specific network for which data should be retrieved.\n\nThe query functions by taking these input parameters, and returns a calculated average of gas utilized per transaction across the selected network for each day within the timeframe provided. The resulting data reflects an average gas utilization percentage for each day, to two decimal places.\n\nThe calculated outputs from this API are presented in a string format detailing dates (`date`) and the corresponding average gas use percentage (`avg_gas_utilization_percentage`).\n\nThe output data is available to be integrated into two styles of visualizations; `Table` and `Chart`. Please note that the API documentation does not contain descriptive information about table-based visualizations.",
    "33": "This API endpoint, 'Daily Gas Used', provides historical data on the amount of gas used per day on a specified blockchain network within a certain date range. It requires two parameters: 'dates' and 'network'. 'Dates' should be a date-range indicating the period for which the data is to be retrieved. 'Network' should be a string indicating the specific blockchain network of interest.\n\nThe API responds with a list of dates along with the total amount of gas used on each of those dates. The data is returned in ascending order by date. A 'Daily Gas Used' chart is also produced for easier visual analysis of the gas usage trend over the specified period. This chart is a simple line chart where the x-axis represents the date and the y-axis represents the gas used. Please note that no description is provided for the table visualization.",
    "44": "This API endpoint, titled \"Unique ERC20 Addresses\", is designed to retrieve a list of unique Ethereum addresses related with ERC20 token transfers for a specific blockchain chain ID within a specified date range. The main functionality of this query is to collect daily data of ERC20 transaction addresses across a blockchain network.\n\nThe required parameters for this endpoint include 'chain_id' (query type) and 'dates' (a date-range type). 'chain_id' denotes the specific blockchain chain ID for which the data is required, and 'dates' represents the start and end dates to outline the date range for extracting the data.\n\nThe query outputs a structured set of data enclosed as text-type 'date' - representing the date of the transactions, and 'unique_addresses' - indicating the number of unique addresses involved in the ERC20 token transfers on the specified date.\n\nAs of the supported visualizations, this API endpoint features a 'CHART' visualization, specifically designed to visually portray a trend called 'Unique ERC20 Addresses', based on the data retrieved by the query.",
    "10": "This API endpoint, \"Transactions\", is primarily designed to fetch the 10 most recent transactions from a specific network. The SELECT statement retrieves all available columns from the 'transactions' table from the given network.\n\nThe expected parameter for this query is 'network', which should be provided as a string in the query. This parameter represents the name of the network database from which you'll extract transaction data.\n\nThe output of this API call includes a comprehensive list of the transactions in the given network, sorted in descending order based on the block number. You'll receive all data in a table format. The 'transactions' table typically consists of details such as transaction hash, block hash, block number, from address, to address, value, etc. Please note, the actual parameters may vary based on the network.\n\nVisual data representation is readily available via a tabular view.",
    "34": "The '#30 Daily Transactions by address' endpoint allows you to retrieve a count of daily transactions pertaining to a specific blockchain address within a given date range. \n\nThis particular endpoint requires three types of parameters: \n- `chain_id` which identifies the blockchain and should be provided as a query parameter. \n- `dates` is a date-range input parameter and determines the period of transactions data you want to retrieve. \n- `address` is a text input that specifies the address to retrieve the transactions data for. \n\nThe API runs a SQL query against the chain's transactions dataset and returns a data table and chart visualizations. The output includes the date ('date') of the transactions and the number of transactions ('txs_per_day') for the addressed on a per-day basis. \n\nPlease note that the TABLE type visualization produces a tabulated data array, while the 'Daily Transactions Chart by address' offers a graphical representation of the data over time.",
    "37": "This API endpoint, named \"Unique ERC20 Addresses\", serves to fetch the count of unique addresses involved in ERC20 token transfers for any given date range and network. The parameters expected by this endpoint are 'dates', which requires a range of dates in the 'date-range' format, and 'network', which expects a string query representing the network (e.g., 'ethereum', 'ropsten', etc.).\n\nThe query returns the date-wise count of unique addresses that have sent or received the ERC20 token during the specified date range in the requested network. The result is presented in two parts: 'date', which gives the day of the transactions, and 'unique_addresses', which gives the total unique addresses involved in ERC20 token transfers on that date.\n\nA visualization titled \"Unique ERC20 Addresses\" is generated showing the count of unique addresses over the specified date range. This graphical representation aids in grasping the data trends instantly.",
    "38": "This API endpoint, \"Average Transaction Fee Chart\", calculates the average maximum fee per gas for transactions within a specified date range from a chosen network. It expects two parameters: 'dates' (a date-range value) and 'network' (a string indicating the network to query). The endpoint executes a SQL query calculating the average maximum fee per unit of gas for every day within the provided date range, returning data in a format suitable for detailed analyses or chart visualization. The returned dataset includes two columns: 'date' (indicating the date of transactions) and 'avg_max_fee' (showing the average maximum fee per unit of gas for the given date). This data is ideal for plotting on a Chart, offering a historical perspective on transaction costs in the chosen network.",
    "40": "This API endpoint, \"#31 Network Average Gas Utilization\", retrieves calculations on the average percentage of gas utilized on a given blockchain network between specified dates. It requires two parameters; 'dates' which is a date-range specifying the start and end dates for the analysis and 'chain_id', used to identify the blockchain network. The query outputs a daily breakdown of the average gas utilization calculated as the ratio of gas used to gas limit, multiplied by the transaction count, expressed as a percentage. This is presented in a table format and a chart visualization. The fetched data gives insights into network activity and resource management, critical to optimizers and network users for planning transactions.",
    "41": "This API endpoint, 'Token Transfers Value', retrieves the sum of token transfer values for a given token address within a specified date range, on a specific blockchain. \n\nParameters: \n- 'chain_id' is a query type parameter that represents the id of the blockchain. \n- 'dates' is a date-range type where users must provide start and end dates for their query. \n- 'token_address_requested' is a text type parameter that accepts the required token address for data aggregation.\n\nThe SQL query first converts the input parameters into a compatible format. It then fetches the sum of token transfers value from the 'dex_etl' table for the specified parameters. This data is grouped by the date and returned in ascending order.\n\nThe output produced will be a dataset, with each record containing the date and the corresponding token transfer value for that day.\n\nVisualization: \n- 'Token Transfers Value' is a chart showing the total value of token transfers as a function of date. It provides a clear visual representation of how the token transfer value has fluctuated over the given date range.",
    "42": "This API Endpoint, identified as '#41 Token Transfers Value', is designed to aggregate the total value of token transfers for a specified token on a given blockchain within a certain date range. The parameters required include:\n\n1. 'chain_id' as a query parameter. This specifies the blockchain from which the data is being retrieved.\n2. 'dates' as a date-range parameter. This determines the period within which the system will analyze token transfer values.\n3. 'token_address_requested' as a text parameter. This is the specific token's address.\n\nThe API Endpoint responds with a selection that includes 'date' (representing the date of the transfers) and 'token_quantity' (representing the aggregate sum of token transfers) for the given date. The output is rendered in two different forms: as a visual 'CHART' called 'Token Transfers Value', illustrating the total value of token transfers over time, and as a 'TABLE' for granular information.",
    "46": "This API endpoint, titled \"Copy of (#21) ERC20 Daily Token Transfer\", fetches the number of ERC20 token transfers for a specific blockchain on a daily basis. It takes two parameters: 'chain_id', a query-type parameter determining the specific blockchain to gather data from, and 'dates', a date-range type parameter specifying the period to retrieve the data for.\n\nThe endpoint outputs a dataset that encapsulates the number of ERC20 transactions ('erc20_txs') on a day-to-day basis ('date') within the specified time frame. The given data is offered with table visualization as default and can also be represented by a generic chart.\n\nThis endpoint provides crucial data for Blockchain Explorers that require an analysis of ERC20 transactions over time on a specific blockchain.",
    "47": "This API endpoint, #37 Unique ERC20 Addresses, allows users to retrieve and count the number of unique ERC20 token transfer addresses per day within a specified date range. The user must provide two parameters: 'chain_id', as a query, specifying the blockchain network id, and 'dates', as a date range, indicating the start and end dates of the period of interest.\n\nThe API query executes the provided SQL and returns a set of results. Each entry in the result set represents a single day within the specified range, and contains two fields: 'date' (the day of token transfers) and 'unique_addresses' (the number of unique ERC20 token transfer addresses on that specific day). \n\nThe data can be visualized via a CHART-type visualization named 'Unique ERC20 Addresses', giving users a clear graphical representation of the data. However, note that no descriptions are generated for TABLE visualizations.",
    "15": "This API endpoint, \"Last Block Indexed,\" allows users to retrieve the most recent block indexed from a specified network's blockchain data. Users need to specify the 'network' query parameter as input. The 'network' is a string which represents the particular blockchain network from which the data will be extracted. The SQL query used for this API calculates the time elapsed since the block was indexed, the block number, and the timestamp of when the block was indexed. The results are ordered by the timestamp in descending order, thus the block with the most recent timestamp is returned. Outputs include 'seconds_ago', 'number', and 'timestamp', representing respectively the number of seconds elapsed since the block was indexed, the block's number, and the block's timestamp. The visual representation of the output is displayed in a table format.",
    "80": "This API endpoint, 'Transaction by Hash Page Main Data', is designed to fetch detailed transactions data from a specified network. It requires three parameters: 'network' that you are querying from (Type: query), 'first' to limit the number of transactions returned (Type: text), and 'skip' to offset the starting position from the total list of transactions (Type: text). \n\nThe output data includes 'hash', 'block_number', 'block_timestamp', 'from_address', 'to_address', 'value', 'gas', 'gas_price', and 'input'. This data would typically be displayed in a tabular format for clear reading and understanding. However, no specific visualization details are provided for the 'Table::TABLE'. Ensure the parameter values provided are valid to get the correct transactions data.",
    "17": "This API endpoint, \"Count Chains,\" is designed specifically for returning an integer count of all chains present within the \"dex_etl\" database. It doesn't accept any parameters, making it straightforward to use for any application requiring counts of blockchain chains. The query being run for this endpoint is \"select count(*) from dex_etl.chains\", which will return a single integer count result. The output of this endpoint will be a JSON object comprising a single value representing the count of chains in the database. The endpoint also provides a table visualization, ideal for a quick visual representation of the total chains available. However, as it's a single count number, it won't provide much detail beyond the count value.",
    "2": "This API endpoint, called \"Chains Supported,\" is designed to fetch data on the different blockchain networks supported by the dex_etl.chains. The SQL query for this endpoint is \"SELECT chain_id as `value`, network as `name` FROM dex_etl.chains.\" The purpose of this is to provide users with a detailed list of available blockchain networks and their corresponding ids in our database. \n\nThe endpoint does not require any parameters to function, which simplifies the execution process for users. Upon receiving a request, it returns a structured JSON that includes these fields: 'value' which represents the unique identifier for the chain, and 'name' which refers to the name of the blockchain network. These JSON data can be viewed in a tabular format that makes it easier for users to discern the information. Please, bear in mind that no further customization options are available for these table visualizations.",
    "92": "This Public API endpoint, \"DAI Daily Receiver Addresses, 7d\", fetches data about the unique receiver addresses for a specific token within the past 7 days. This query is especially designed for exploring transaction patterns in a block.\n\nTo execute this query, it requires one parameter: 'token_address', which should be a string text representing the specific token address you are interested in.\n\nThe endpoint returns data organized as two columns: 'transaction_date' and 'unique_address_count'. 'transaction_date' represents the date of transactions and 'unique_address_count' represents the count of distinct receiver addresses encountered on that day. \n\nIn terms of visualization, there's a chart that offers a clear demonstration of the count of unique receiver addresses per day for the examined token within the 7-day interval.",
    "56": "This API Endpoint, \"Networks Supported\", is designed to fetch data regarding the different networks supported by the Block Explorer. It retrieves this information from the `dex_etl.chains` table via an SQL query. The query returns the 'network' and the concatenated 'network' and 'chain_id' as `name` and `value`, respectively. \n\nCurrently, there are no parameters required for this query, thus it supports a simple GET request. \n\nThe output produced is a list of supported networks along with their corresponding 'chain_id'. The output data is structured in a table format (with 'name' and 'value' as the primary columns). Please note that no specific visualization has been created for this data, making it best for direct data retrieval or use in creating custom visualizations.",
    "4": "This API endpoint, Top Event Types Emmitted, is designed to retrieve the ten most frequent event types or topics from the specified network logs. It is executed through an SQL query that counts and sorts the event topics based on their occurrence frequency. The required parameter for this API is 'network', which needs to be inputted as a query type parameter in the request. The retrieved event types are returned as an output with their corresponding occurrence counts. For better understanding and interpretation of the data, a CHART visualization titled 'Top Events Signatures' is provided, clearly illustrating the event types and their respective counts.",
    "48": "This API endpoint, \"ERC20 Daily Token Transfer by Token\", provides data on the daily transactions of a specific ERC20 token. The query uses parameters such as 'chain_id' (text format), to identify the specific blockchain, 'dates' (a date range format), to specify the time frame, and 'token_address_requested' (text format), to specify the token's address.\n\nThe results of the query are displayed as a list of dates, along with the number of transactions involving the given token that occurred on each date. The data is sorted by date in ascending order. \n\nIn terms of visualization, this endpoint makes use of a Chart Visualization in addition to plain data tables, to better illustrate the volume of transactions over the specified date range.",
    "49": "This Public API endpoint, `ERC20 Daily Token Transfer by Token`, serves to retrieve the daily count of ERC20 token transfers for a given token and specific date range on a specified blockchain network. The endpoint expects three parameters:\n\n1. `chain_id` (query type): This specifies the blockchain network where the token resides.\n2. `dates` (date-range type): This defines the start and end dates for the data to be fetched.\n3. `token_address_requested` (text type): This is the specific address of the ERC20 token which should be analyzed.\n\nThe query returns a timestamp in YYYY-MM-DD format (`date`) and the corresponding number of ERC20 token transfers (`erc20_txs`) for that date. \n\nThe output is available for two forms of visualization: A Table (for a raw numeric view) and a Chart (for a graphical trend view). Note that the output is ordered in ascending dates for a chronological view.",
    "50": "This API Endpoint, named 'Unique ERC20 Addresses', is designed for retrieving a list of unique Ethereum (ERC20) addresses that performed token transfers within a specified date range. \n\nThe required parameters this endpoint takes are: \n- 'chain_id', a query type parameter that represents the ID of a specific blockchain; \n- 'dates', a date-range type parameter that marks the start and end timestamp for the data extraction.\n\nResponse from this endpoint contains a list that represents each unique date within the given range alongside the number of unique addresses that carried out token transfers on that specific date. The list is sorted ascendingly by the 'date'. \n\nIn addition to the tabular data, a chart visualization named 'Unique ERC20 Addresses' is also provided representing the same information graphically over time.",
    "45": "This API endpoint, Historical Gas Fee By Hour, retrieves the average maximum gas fee on a block explorer for every hour within a specified date range. Two parameters are required for this query. The 'dates' parameter, which is a range of datetime with seconds, and the 'network' parameter, a query that signifies the network the block resides in. The API then conducts an SQL operation on these parameters, converting the date range into Unix timestamps and using the network specified to filter the required transactions. The outcome of this query provides a table with each row representing an hour of a date within the range, and the average maximum gas fee for that hour. This data output is further visualised in a chart - 'Average Gas Fee By Hour', aiding the understanding of gas fee trends across each hour in the specified date range.",
    "51": "This API endpoint, titled 'Unique ERC20 Addresses', is designed to fetch unique addresses involved in token transfers within a particular blockchain (determined by 'chain_id') and specified dates range. The purpose of the query is to aggregate and return the unique combined 'from' and 'to' addresses for every day within the selected date range.\n\nThe API accepts two parameters. 'chain_id' is a query parameter that specifies the blockchain, and 'dates' is a date-range parameter that sets the start and end dates for the data retrieval.\n\nThe result of the API call is a table which shows the date and the corresponding count of unique addresses involved in ERC20 token transfers for that specific day. The dates are returned in a string format and are ordered in ascending order. \n\nIn terms of visualization, an illustrative chart graphing Unique ERC20 Addresses over time is created, providing an easy understanding of address distribution patterns over the given date range.",
    "52": "This API endpoint, denoted by the SQL query `Copy of (#37) Unique ERC20 Addresses`, serves to fetch the unique ERC20 addresses from the database. It requires two parameters: `chain_id` (a query type parameter specifying the blockchain id) and `dates` (a date-range type parameter used to define the start and end date for the query). Based on these inputs, this endpoint generates a table with date and unique addresses per day in ascending date order.\n\nMoreover, visualizing the output data can be done through a specific chart named 'Unique ERC20 Addresses', which offers insights into how the count of unique ERC20 addresses varied over the selected date range. Another general chart visualization format is available for displaying the data in various layouts.",
    "53": "This API endpoint, '#37 Unique ERC20 Addresses', retrieves the number of unique Ethereum addresses that have been used in ERC20 token transfers within a specified date range. \n\nThe parameters required for this API are:\n1. 'chain_id' (from the query). This parameter identifies the specific blockchain network.\n2. 'dates' (date-range type). This parameter represents a range of dates for which the data will be collected.\n\nThe query will return a table containing a row for each date within the specified range. Each row includes the date and the number of unique addresses involved in ERC20 token transfers on that date.\n\nIn addition to the table, the endpoint comes with a chart visualization named 'Unique ERC20 Addresses'. This chart gives a visual representation of the variation in the number of unique addresses over the specified date range.",
    "97": "This API endpoint, \"DAI Number of Transfers with Unique Address, 7d (to and from combined)\", is designed to fetch the count of unique addresses involved in the transactions of a particular token over the past seven days. It expects a 'token_address' as the input parameter which should be a text string signifying the token's address for which the counting will be performed. The output produced by this endpoint consists of the transaction date along with the total count of unique addresses involved in the transfers on that date. The data is arranged chronologically by the transaction date. A chart visualization is created using the data fetched, displaying the count of unique addresses involved in transactions with the given token over the past 7 days. This API endpoint primarily serves the Block Explorer pages.",
    "6": "This Public API Endpoint, \"Total Transactions\", aggregates the total number of transactions from the specified network. It uses a SQL query restricted by the dynamic 'network' parameter, which expects a string type representation of the network name. It returns the output 'total_transaction_count', representing the sum of all transactions, produced from the specified 'network'. A visualization named 'Transactions Count::COUNTER' is also created for this output, providing a visual count representation of the total transactions.",
    "86": "This API endpoint is designed to deliver information on the number of daily token transfers for a specific token in the past seven days. It requires one parameter: `token_address` of type text, which identifies the token for which the data is gathered. \n\nUpon making a GET request, the endpoint initiates an SQL query that retrieves the date of the transactions (`transaction_date`) and the number of transfers (`transfer_count`) for each day from the token_transfers table in the base database. It only includes transfers that occurred within the last seven days. \n\nThe endpoint generates a record for each day, presenting the date and the total number of transfers on that day. It then arranges the records in the ascending order by date for easy scanning. In addition to the tabular representation, a line chart visualization is provided to illustrate the volume of daily transfers for the queried token.",
    "93": "This API endpoint is designed to retrieve the name of a specific token based on its associated address. It is purposed for serving Block Explorer pages. The required parameter for the query is 'token_address' which should be provided as text. The inputted 'token_address' is passed through a SQL query to the `base.tokens` table to produce the output. The output of this endpoint is the name of the token that matches the provided token address. The results are displayed using a table visualization, providing a clear and efficient way to view the token information.",
    "87": "This API endpoint, New Query, retrieves the last known stable price of a specific token on the specified blockchain. It accepts two parameters: 'token_address' (text field) which indicates the address of the token to be queried, and 'chain_id' (text field) which designates the blockchain. The output is yielded in a structured table format including the specified token's address, the specified chain's id, and price_stable.2 which represents the stable price of the token on that chain. Note that the table visualizations aren't given any detailed descriptions. External developers can utilize this endpoint to track token prices across different blockchains.",
    "73": "This Public API Endpoint documentation describes the 'All Blocks Page' query. The query's main purpose is to fetch distinct block data from a given network in the blockchain. \n\nThe query has three parameters: \n\n1. 'network' (query type) - Represents the specific network in the blockchain.\n2. 'first' (enum type) - Dictates the limit on the number of entries returned.\n3. 'skip' (number type) - Specifies the number of entries to be offset from the start.\n\nThe result output provides the following fields for each block: block number, timestamp of the block creation, miner who mined the block, gas limit of the block, gas used in the block, transaction count in the block, and the base fee per gas for the block.\n\nA TABLE visualization is incorporated into the output to aid in convenient data viewing and interpretation.",
    "88": "This API endpoint uses a SQL query to serve daily transfer data for the specified DAI token, including unique sender and receiver addresses over the past seven days. The endpoint expects one parameter, `token_address` which is of type text. \n\nThe output produced includes the transaction dates, along with the count of unique addresses from which tokens were sent (`token_sender_address_count`) and to which tokens were received (`token_receiver_address_count`) for each date. This information is essential for understanding the token's daily transfer activities.\n\nA Chart visualization is also generated from the result to offer a more intuitive understanding of daily transfer activity. The chart presents the unique address counts over time, making it easier for users to identify patterns and trends.",
    "94": "This public API endpoint, \"Historical Gas Fee By Hour\", serves Block Explorer pages by providing hourly statistical data on Ethereum Gas fees in a specified time range and network. It requires two parameters: 'dates' which is a range of datetime in 'YYYY-MM-DD hh:mm:ss' format and 'network' which is a string specifying the Ethereum network (like 'mainnet', 'ropsten', 'rinkeby', etc.) in query.\n\nUpon receiving a request, it fetches 'block_timestamp', and performs calculations to provide average 'max_fee_per_gas' for each hour within in the provided dates. The result is a set of rows each containing the date, hour (in 'hh:00' format), and the average maximum gas fee for the corresponding hour. The data is grouped by date and hour and ordered in ascending order.\n\nRegarding visualizations, it supports 'Average Gas Fee By Hour' as a chart visualization, ideal for tracking gas fee trends over time. The 'Table' visualization isn't described in API documentation.",
    "75": "This API endpoint, \"All Transactions Page,\" retrieves a list of all transactions relating to a specified blockchain network. The server expects three parameters in the request:\n\n1. 'network' (query type parameter): This specifies the blockchain network to retrieve the transactions from.\n2. 'first' (enumeration type parameter): This instructs the server on the maximum number of transactions to fetch in one query.\n3. 'skip' (text type parameter): This parameter is used to skip over a specified number of transactions, often useful in pagination.\n\nThe server executes a SQL query to fetch details like transaction 'hash,' 'block_number,' 'block_timestamp,' 'from_address,' 'to_address,' and 'value' from the 'transactions' table of the specified network. The retrieved data is shown in the visualization format 'Table,' providing an organized visualization of the blockchain transactions information. Please note, no specific formatting/styling data on Table Visualizations is provided.",
    "7": "This API endpoint utilizes a SQL query that measures the average number of transactions per minute within a specific date range on a specified network. It requires two parameters: 'dates', which is a date-range and defines the start and end dates for the desired data, and 'network', a query parameter that determines the network to be analyzed.\n\nThe API produces an output of the average count of transactions that occurred every minute within the specified date range on the chosen network. This value is labeled as 'avg_transactions_per_minute'. \n\nAdditionally, a visualization labelled 'Transactions Per Minute (TPM)' is generated, representing the average transaction count in a more visual form to allow users a clearer understanding. However, a table format visualization is also provided without an accompanying description.",
    "57": "This Wallet Balance API endpoint is created to fetch balance and associated details of a specific wallet, identified by `holder_address`. It accepts no parameters but uses a hardcoded holder_address `0x1d20635535307208919f0b67c3b2065965a85aa9` in its SQL query.\n\nThe API returns multiple outputs, which includes `token_address`, `chain_id`, `token_standard`, `timestamp` of the last transaction, `balance`, `name` of the token, `symbol`, `decimals` to present the token in its simplest form, `logo` of the token, and `price` of the token.\n\nThe result of the API call will be displayed in a tabular format. Note that as of today, this API does not support customizable visualization. The endpoints described get data from the `token_balances`, `inventory_synthetic_v1`, and `last_price_v01` datasets which are part of 'canto' and 'dex' databases respectively. \n\nPlease be aware, this endpoint is specifically developed for the Block Explorer pages and is available to the public.",
    "84": "This API endpoint, \"Address Warehouse Page NFT TXs,\" retrieves the details of NFT (Non-Fungible Token) transactions for a specific address from the token transfer warehouse of a specified network. It requires the 'network' (query parameter type), 'address' (text parameter type), as well as 'first' (enum parameter type defining the number of records to fetch) and 'skip' (text parameter type calculating the number of records to offset).\n\nThe API executes a SQL command that selects the transaction hash, block timestamp, from and to addresses, value, and token address for given address and network, ensuring the transaction involves an NFT by checking 'is_nft' equals 1.\n\nThe output of this API call is a structured JSON containing the specified fields from the token_transfers table from the defined network. This data is best displayed in a table visualization rendering for comprehensive data assessment.",
    "43": "This API endpoint, identified as '#37 Unique ERC20 Addresses', allows clients to retrieve the count of unique addresses involved in token transfers for a specific blockchain specified by its chain ID within a defined date range.\n\nRequired parameters include 'chain_id' as a query input type that identifies the specific blockchain, and 'dates' as a date-range input type to set the period of interest for the query.\n\nThe endpoint executes and returns a dataset containing the 'date' (specified as the block timestamp formatted to the date format) and 'unique_addresses' (calculated as the combined unique count from and to addresses involved in token transfers).\n\nThe data returned by this API is meant for visualization as a chart that depicts the trend of unique ERC20 addresses over time. Please note that this API doesn't provide any functionality for generating table visualizations.",
    "83": "This API endpoint, \"All Transactions Page NFT tab\", retrieves a list of Non-Fungible Token (NFT) transfers from a specific network. The query is designed to select transaction details such as transaction hash, block timestamp, from address, to address, value, and token address. \n\nInput parameters required are:\n- 'network' (query type): Specifies the network from which the data is to be retrieved. \n- 'first' (enum type): Defines the limit on the number of entries returned by the query.\n- 'skip' (text type): Determines the number of entries to offset or skip in the output.\n\nThe output includes a list of NFT transfers with their transaction hash, block timestamp, from and to addresses, value, and token address. \n\nPlease note that the data is presented in a tabular format (Table::TABLE) for ease of viewing and interpretation.",
    "54": "This API endpoint runs a SQL query to retrieve and display the count of unique Ethereum ERC20 token addresses involved in transactions from a specified date range and chain ID. The parameters expected by this API include 'chain_id' which should contain a string representing a unique identifier for a blockchain network, and 'dates' which should contain a date-range indicating the start and end timestamp for the data retrieval. The output produced by this endpoint includes a 'date' field, representing the date of transactions, and 'unique_addresses', indicating the count of unique ERC20 addresses participating in transactions on the specified date. A visualization 'Unique ERC20 Addresses' chart is created to give a graphical representation of unique addresses over the specified date range.",
    "55": "This API endpoint, #37 Unique ERC20 Addresses, aims to provide the count of unique ERC20 addresses for a specified date range. It expects two parameters: 'dates' (a date-range) and 'network' (a query). \n\nThe 'dates' parameter takes in a start and end date to filter the data set. The 'network' parameter is a query string that determines which network the endpoint has to retrieve data from.\n\nThe endpoint returns a table containing dates and the associated count of unique addresses for each date. The table data is ordered by date in ascending order.\n\nIn addition to this, two other visualizations are created: 'Unique ERC20 Addresses' and 'Chart'. These are designed to graphically represent the output data for more clear and analytical understanding. Note that the Table visualizations don't have any special description.",
    "1": "This API endpoint, Transactions Count, is designed to provide a comprehensive summary of transactions within a specified date-range for a particular network. The query expects two parameters: 'dates', a date-range (start date and end date) defined as string, and 'network', a query representing the specific blockchain network of interest. The SQL executes a transaction count, determines the number of active addresses and active smart contracts within the given period.\n\nThe API returns a table listing out each date within the provided range along with its corresponding transactions count, active addresses, and active smart contracts for the defined network. Moreover, it visualizes this data as a chart, plotting Transactions, Active Addresses, and Active Smart contracts over time. This visualization assists users comprehend the progress and activity level within the network over the specified period.",
    "3": "The 'Top Emitting Contracts' API Endpoint fetches the addresses that are most active in terms of log emissions on the specified blockchain network. The query requires one parameter, 'network', which should be a string value representing the desired blockchain network.\n\nThe query retrieves two pieces of information for each address. The 'address' field represents the Ethereum address while 'count' is the total number of logs emitted by the address on the specified network. Results are ordered in descending order by the count of logs and limited to the top 10 addresses.\n\nThis API Endpoint is rendered in a Chart Visualization presenting a clear view of the most frequently emitting contracts on the selected network. The graphical representation makes it easier to comprehend the count distribution among different addresses.",
    "5": "This API endpoint, titled \"Last Block Number\", serves to retrieve the number of the most recent block from a specified network. The query performs an action to select the maximum block number from the network's blockchain. One required parameter is expected for this endpoint. This parameter, \"network\", is a query-type parameter indicating the specific network from which the block information is to be retrieved. The query's output includes the highest block number currently available on the selected network, labeled as \"block_number\". In terms of visualization, this endpoint provides a COUNTER visualization labeled \"Last Block Number,\" effectively showcasing the most recent block number in a clear, easily understandable format. Note that no table visualizations are generated by this endpoint.",
    "58": "This API endpoint fetches the balance records of specific token addresses associated with a given account on a specified network and chain. It is designed to return a view of non-zero balances for a single account. \n\nThe endpoint expects three parameters: \n1. 'chain_id' (text): The identifier for the blockchain.\n2. 'network' (text): The network in which the account exists.\n3. 'account_address' (text): The unique address of the account. \n\nThe resulting output will include:\n1. 'token_address': The address of the token.\n2. 'Chain_id': The id of the blockchain channel.\n3. 'timestamp': Maximum timestamp associated with the balance record.\n4. 'balance': Largest balance recorded for given timestamp.\n5. 'token_standard': The standard used by the token.\n6. 'token_id': Unique identifier for each token.\n\nPlease note that this endpoint generates a table for visualization.",
    "59": "This API endpoint, `GetAccountBalances`, retrieves records of all token balances for a specific account. It fetches the balances held by an account on a specified network and chain.\n\nInput Parameters:\n1. `chain_id` (Text): identifier for a specific blockchain. \n2. `network` (Text): designates the blockchain network.\n3. `account_adderss` (Text): unique identity of the account to extract balance information for.\n\nThe query performs a SELECT operation on the `token_balances` table and returns the token address, timestamp of the most recent block, balance at that timestamp and the token standard. Only tokens with a balance greater than zero are considered. \n\nThe output produced by the endpoint is a table which displays the token_address, chain_id, timestamp of the last transaction, balance of the tokens, and the token standard for each entry.",
    "60": "This API endpoint, denoted as 'Account Balances Records', helps to retrieve the balance record details of a specified account on a specified blockchain network. It demands three parameters : `chain_id` (text), `network`(text), and `account_address`(text). \n`chain_id` refers to the unique identifier of the blockchain network. `network` signifies the name of the blockchain network, while `account_address` denotes the desired account's unique address on the blockchain.\nThe endpoint returns a set of outputs that includes: `token_address`, `chain_id`, `timestamp`, `balance`, and `token_standard`. The `token_address` is the address of the token in the blockchain. `chain_id` returns as unsigned 32-bit integer form of input `chain_id`. `timestamp` and `balance` signify the timestamp of the latest block and balance at that timestamp, respectively. `token_standard` is the standard protocol followed by the token.\nPlease note that this API endpoint does not return accounts with a zero balance.",
    "61": "This API endpoint provides the capability to retrieve a user's account details for a specific blockchain network, specifically the balances and token standards associated to the account on that particular chain. The implemented query fetches the token address, blockchain ID (cast as a 32-bit unsigned integer), the block timestamp for the highest value record, the highest balance recorded, and the token standard. \n\nThe query expects three parameters:\n- `chain_id` (text): The ID of the blockchain that the query is to be run on.\n- `network` (text): The specific network on the stated blockchain.\n- `account_address` (text): The address of the account whose details are to be fetched.\n\nThe output generated by the API includes data about the token address, chain ID, timestamp of the maximum recorded balance, the maximum balance itself, and the token standard associated with the balance.\n\nFinally, the outcome of this data retrieval is presented in a tabular format.",
    "62": "This API endpoint is designed to query the account balance records of a specific account on a given blockchain network. It's primarily used to provide data for the Block Explorer pages.\n\nThe endpoint expects three parameters: `chain_id` (text type), `network` (text type), and `account_address` (text type). `chain_id` refers to the unique identifier of the blockchain chain. The `network` parameter is the name of the blockchain network. `account_address` represents the specific account that further will be inspected for its balance records.\n\nThe endpoint will output a list of token addresses, their corresponding token standards, the timestamp of the latest block, and the balance of tokens for each token address. It's important to mention that the query will return accounts with a balance greater than zero.\n\nThe results are presented in a table format (Table::TABLE) for straightforward data perusal and analysis.",
    "63": "This API endpoint, identified as 'Copy of (#58) Account Balances Records\u2019, is designed to retrieve the balance records of specific account addresses. It requires three parameters: `chain_id` of a text format represents the unique identifier of the blockchain, `network` specifies the particular network in the blockchain, also in text format, and `account_address` identifies the specific account address in text format. \n\nThe endpoint runs a SQL query on the server, grouping results by token_address, token_standard, and token_id while filtering the data to only include records with balances greater than 0. It retrieves the most recent timestamp (based on block_timestamp) for each group, together with the associated balances, token addresses, token standard, and token id. \n\nThe returned data will be visualized in a table format.",
    "67": "This API endpoint, labeled \"Account Balance Records\" (#58), is designed to fetch records about the balance of a specific token held by a particular account address on a specific blockchain network. It uses a SQL query to get the token's details, timestamp of the last transaction and its balance.\n\nIt expects four parameters: \n1. 'chain_id' (text): This denotes the ID of the blockchain network.\n2. 'network' (text): This specifies the network database from which records will be fetched.\n3. 'account_address' (text): It represents the specific account's address whose records are to be fetched.\n4. 'token_address' (number): Address of the token.\n\nThe output generated is a table succinctly showing each token address, the standard of the token, token ID, timestamp of the last transaction involving the token, and the balance of the token. Please note that only those records will be displayed where balance is greater than zero.",
    "68": "This query, titled \"Copy of (#58) Account Balances Records\", is designed to retrieve account balance records for a specific token held by a specified account in a specified network. \n\nThe query expects four parameters:\n- `chain_id`: a text string representing the blockchain network's identification.\n- `network`: a text string representing the name of the blockchain network.\n- `account_address`: a text string representing the public address of the account holder.\n- `address`: a text string used to specify the address of the account.\n\nThe query performs the following tasks:\n- Selects the `token_address`, converts the `chain_id` to a UInt32 form, retrieves the maximum `block_timestamp` and `value` to provide the latest record, and also selects the `token_standard` and `token_id`.\n- Extracts and groups the records from the `token_balances` table in the specified `network` where the `holder_address` matches the provided `account_address` and the `address` matches the provided `address`.\n- Filters the grouped records to include only those with a `balance` greater than zero.\n\nThe query's output includes: \n1. `token_address`: the address of the token.\n2. `chain_id`: the ID of the chain.\n3. `timestamp`: the timestamp of the block.\n4. `balance`: the balance of the token.\n5. `token_standard`: the standard of the token.\n6. `token_id`: the ID of the token."
}